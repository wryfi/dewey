# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-09 22:28

from __future__ import unicode_literals
import re

from django.db import migrations


def get_host_environment(hostname):
    match = re.match(r'.*-(\d{3})', hostname)
    if match:
        if match.groups()[0][0] == '1':
            return 'prod'
        if match.groups()[0][0] == '2':
            return 'dev'
        if match.groups()[0][0] == '3':
            return 'qa'
        if match.groups()[0][0] == '4':
            return 'stage'
        if match.groups()[0][0] == '9':
            return 'vagrant'
    return 'other'


def migrate_hosts(apps, schema_editor):
    Host = apps.get_model('hosts', 'Host')
    EnvHost = apps.get_model('environments', 'Host')
    Environment = apps.get_model('environments', 'Environment')
    Role = apps.get_model('environments', 'Role')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    for host in Host.objects.all():
        host_roles = []
        for role in host.roles.all():
            env_role = Role.objects.get_or_create(name=role.name)
            host_roles.append(env_role[0])
        host_environment, created = Environment.objects.get_or_create(name=get_host_environment(host.hostname))
        if created:
            print('Created new environment {}. Please be sure to set its hostname_regex.'.format(host_environment.name))
        if host.parent_type.id == ContentType.objects.get(app_label='hosts', model='host').id:
            parent_type = ContentType.objects.get(app_label='environments', model='host')
        elif host.parent_type.id == ContentType.objects.get(app_label='hosts', model='cluster').id:
            parent_type = ContentType.objects.get(app_label='environments', model='cluster')
        else:
            parent_type = host.parent_type
        new_host = EnvHost(id=host.id, hostname=host.hostname, environment=host_environment,
                           operating_system=host.operating_system,
                           parent_type=parent_type, parent_id=host.parent_id)
        for role in host_roles:
            new_host.roles.add(role)
        new_host.save()


class Migration(migrations.Migration):
    dependencies = [
        ('hosts', '0016_auto_20160609_0813'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('environments', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(migrate_hosts)
    ]
